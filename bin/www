#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('Baitap1:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io')(server);


// server lang nghe client, khi co nguoi ket noi toi voi key la 'connection', va hien lai thong bao cho server
io.on('connection', function(socket){
  console.log('co nguoi ket noi toi');

//server lang nghe voi key la 'new user', gia tri nhan ve la data, data la gia tri user nhap vao cua client gui len
  socket.on('new user', function(data){
// gan gia tri socket.name la data
    socket.name = data;


  });
// server lang nghe tin nhan tu client voi key la'message client', gia tri nhan ve la data
  socket.on('message client', function(data){

// server tra lai gia tri cho client voi key la 'new message', gia tri nay la socket.name duoc gan o tren va tin nhan data client moi gui len
// voi io.sockets.emit server se tra ve tat ca cac client dang ket noi toi server
// voi io.broadcast.emit server se tra gia tri ve cho tat ca cac client tru client vua emit len server.
    io.sockets.emit('new message',{name: socket.name,  message: data})

  
  });
});



/**
 * Listen on provided port, on all network interfaces.
 */








/*
 io.on('connection', function(socket){
  console.log('a user connected');
});
*/




/*

var chat = io
  .of('/chat')
  .on('connection', function (socket) {
    socket.emit('a message', {
        that: 'only'
      , '/chat': 'will get'
    });
    chat.emit('a message', {
        everyone: 'in'
      , '/chat': 'will get'
    });
  });

var news = io
  .of('/news')
  .on('connection', function (socket) {
    socket.emit('item', { news: 'item' });
  });


  io.on('connection', function(socket){
  socket.on('chat message', function(msg){
    console.log('message: ' + msg);
  });
});




  io.on('connection', function(socket){
  socket.on('chat message', function(msg){
    console.log('message: ' + msg);
  });
});

*/



 /* io.on('connection', function (socket) {
  socket.emit('news', { hello: 'world' });
  socket.on('my other event', function (data) {
    console.log(data);
  });
}); */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);








/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}



